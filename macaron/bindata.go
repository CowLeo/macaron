package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_new_config_toml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x8e\xc3\x20\x0c\x45\xf7\x9c\xc2\xa2\xdb\x91\x7a\x82\x39\xc3\x6c\xba\x8b\xba\x20\xf0\xd3\xba\x32\x10\x81\x51\xaf\x3f\xae\xaa\xcc\x44\xe9\xce\xff\x3f\x78\x92\x7d\xa2\xcb\x1d\x94\xb0\x84\x21\x4a\x89\x1b\xa2\xd6\xc6\xe8\x6e\x37\xd3\x37\x4d\x8e\xc8\xc7\x5a\x16\xff\x45\xaf\x31\xd7\x04\xe9\xff\x61\x08\xfa\x39\x73\x4a\x82\x67\x68\x38\x80\x39\x74\xab\xf6\x4d\x87\x2a\x97\xdb\x66\x50\xe4\x55\x82\x62\xcb\xeb\x98\x85\xe3\xf9\x71\xc8\xb1\x1f\x0a\xce\x7f\x8a\x56\x87\xa2\x75\xef\xae\xce\x9d\xe8\x67\x55\xae\x85\xb4\x12\x97\x28\x23\x81\x02\x35\x84\x94\x41\x0b\x0b\xc8\xd8\xda\xea\xc3\x36\xb4\x07\xac\x6e\x7a\xc3\xab\x43\x09\xb3\x20\xd9\xca\xda\x06\xdc\x52\x5b\x0e\x6a\xc9\xe7\xe4\x5f\xe2\xcb\x9d\x3b\x3d\x59\x84\x6e\xfc\xfe\x4b\x6a\x17\xdc\x64\xe6\x8d\xa6\x52\xb8\xc9\xf8\x87\xee\x37\x00\x00\xff\xff\x8f\x69\xe5\xbd\x6f\x01\x00\x00")

func templates_new_config_toml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_new_config_toml,
		"templates/new/config.toml",
	)
}

func templates_new_config_toml() (*asset, error) {
	bytes, err := templates_new_config_toml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/new/config.toml", size: 367, mode: os.FileMode(420), modTime: time.Unix(1426874330, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_new_files_app_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xce\xcf\x4a\x03\x31\x10\xc7\xf1\x73\xe7\x29\x86\x9c\xb2\x20\x49\xbd\x0a\x3d\x48\x11\x3d\x49\x59\xa8\x57\x89\xd9\xb1\x86\xee\xcc\x94\xfc\xa1\xc2\xb2\xef\xee\x52\x6a\xc5\xeb\x7c\x60\x7e\xdf\x53\x88\xc7\x70\x20\xe4\x90\x04\x20\xf1\x49\x73\x45\x0b\x2b\x73\x48\xf5\xab\x7d\xb8\xa8\xec\xf7\x72\x94\xb3\x8a\xe7\x10\x43\x56\x31\xb0\xf0\x34\xb9\xd7\xc0\x34\xcf\x9e\x75\x68\x23\x15\xcf\x69\x18\x46\x3a\x87\x4c\xe6\x9f\x67\x6d\x95\x72\x31\xd0\x01\x44\x95\x52\xf1\x71\xb7\x7b\x7f\x7b\xea\x71\x83\x66\xed\xee\xdd\x7a\x79\xf8\xd9\x24\x5e\x1a\x6c\x87\x13\xac\x18\x1f\x36\x78\x9d\x73\xdb\x31\x94\x92\xa2\xed\x96\xbb\xdb\x17\xb2\xbf\xd0\x93\x0c\x94\x29\xdb\xee\x8f\x6e\x11\x6e\xab\x52\xe9\xbb\xde\xf8\x99\xaa\x35\xde\xdc\xe1\x35\xc8\xbd\x28\xd3\x45\xfa\xb6\xcc\xc2\x0c\x3f\x01\x00\x00\xff\xff\x9a\x57\xbf\x79\x0c\x01\x00\x00")

func templates_new_files_app_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_new_files_app_tmpl,
		"templates/new/files/app.tmpl",
	)
}

func templates_new_files_app_tmpl() (*asset, error) {
	bytes, err := templates_new_files_app_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/new/files/app.tmpl", size: 268, mode: os.FileMode(420), modTime: time.Unix(1427308737, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_new_files_conf_app_ini_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x4f\x73\xe3\x46\x76\xbf\xe3\x53\xf4\xd0\xd9\x78\x26\xc5\x7f\x92\x3c\x1a\x59\xb6\x12\x53\x24\x28\x61\x45\x91\x34\x00\x69\x3c\x9e\x52\x61\x20\xa0\x49\xc2\x02\xd1\x18\x34\x20\x89\x5b\x39\xc4\x95\x43\xee\xc9\x56\x72\xc9\x21\x39\xa4\x72\x48\x36\xa9\xdc\x76\xb7\x2a\xa7\xad\xdc\xed\xef\xe0\xf2\x6e\xbe\x45\x7e\xaf\x1b\x20\x41\x8d\x76\xd6\xbb\x49\x6a\xa6\x44\xa0\xff\xbc\x7e\xff\xdf\xef\x35\x3e\x60\x63\xf3\xd2\xb4\x99\xfa\x73\x3e\x19\x58\xc3\x57\xcc\x3d\xb5\x1c\x36\xb4\x46\xa6\xf1\x01\x9b\x8e\xcc\x9e\x63\xb2\xf3\xde\x99\xc9\xfa\xa7\xbd\xf1\x89\xe9\xb0\xc9\x98\xf5\x27\xb6\x6d\x3a\xd3\xc9\x78\x60\x8d\x4f\x58\xff\xc2\x71\x27\xe7\x18\x1c\x0f\xad\x13\xbd\xd3\xf8\x84\xf5\xd2\x94\x25\xfe\x92\xb3\x7c\xe1\xe7\x4c\x2e\xc4\x9d\x64\x22\x61\xfc\x96\x67\x2b\x96\xfa\x73\x4c\x44\x79\xcc\x8d\xde\x74\xea\x8d\x7b\xe7\x26\x3b\x62\x27\x62\x2e\x0f\xf1\x97\x9d\x44\x39\x73\x78\x76\x1b\x05\x1c\x94\xfa\x0b\x3f\xc1\x72\x8c\x45\x33\xb6\x12\x05\xcb\x8a\x84\xc5\x22\xf0\xe3\x78\x65\xd8\x17\x63\xef\xc2\x01\xf7\x47\x6c\x1e\xe5\x58\x6d\x46\xf9\x82\x67\xac\x11\xf2\xdb\x46\x93\x35\xd2\x4c\x84\x0d\x26\x30\x90\x73\x99\x63\x24\xe4\x33\xbf\x88\x41\x4b\xea\x35\x8a\x02\x44\x27\x06\xf0\x6e\x18\xaf\x33\x9e\x0a\x19\xe5\x22\x5b\x5d\x19\xf6\x64\xe2\xb2\x23\xc3\xe9\xdb\xd6\xd4\xf5\xdc\x57\x53\x5a\x76\xed\xcb\x05\xd6\x49\x70\xc8\xb3\x2b\x63\x6a\x4f\xdc\x49\x7f\x32\xc2\xcc\x22\xcf\x53\x63\x30\x39\xef\x59\x63\xbc\x29\x1e\x17\x42\xe6\x8a\x8c\x77\x61\xd3\x92\x1f\x3d\xad\xd6\x3f\x93\x87\x9d\xce\x8f\x9e\xea\xe5\x78\xf9\xd1\xd3\x53\xd7\x9d\x7a\xd3\x89\xed\x3e\x93\x1d\x43\xbd\xf4\x06\x03\x88\x66\xac\x27\x40\x60\xaf\xdb\xed\x42\xce\x41\x24\xfd\xeb\x98\x33\xc7\x39\x65\x33\xee\xe7\x45\xc6\xd9\xdd\x82\x27\x2c\x11\x39\xf3\x6f\xfd\x28\xa6\x69\x63\x60\x39\xbd\xe3\x91\xe9\xd1\xb2\x23\x36\xf3\x63\xc9\x0d\x3c\x57\xc4\x76\x77\x6b\xa4\xfa\x83\x31\xd9\x27\x61\x51\x52\x29\x6e\x29\x42\x6e\x4c\x86\xc3\x91\x35\x36\x2b\x2d\x69\x22\x15\x61\x7b\x72\xe1\x9a\xb6\x37\x9a\x9c\xac\xa7\x3e\x61\x27\x3c\xe1\x99\x9f\x73\x26\x73\x9e\xca\x43\x8c\xfc\x11\x0b\x42\x98\x3d\x5f\x74\x72\xd1\x99\xc3\xd0\x9d\xa0\x90\xb9\x58\x76\x48\x65\x52\x2d\x68\xab\x71\x16\xf0\x2c\x67\xad\xc0\x3f\xca\xb3\x82\xb3\x56\x58\x80\x50\x24\x92\xa3\x83\x17\xfb\xdd\x45\x77\xd9\x95\xac\x45\x3a\x3d\x5a\xae\xe8\xa7\xcd\xef\xfd\x65\x1a\xf3\x76\x20\x96\xc6\x27\xa0\x33\xc9\xd8\x2c\x13\x4b\xe6\xb3\x76\x3a\xbb\x67\xb3\x08\x82\xf1\xfb\x54\x64\x39\x0f\xf5\x0c\xfc\x83\xbd\x8c\x92\x90\x3c\x92\x0e\x8b\x66\x51\xa0\x79\x15\xd0\xe1\xd3\x50\x80\x0a\x29\x71\x26\xb2\x39\xcf\x59\x2e\xca\xfd\x6a\x63\x9a\x45\xb7\xb4\xf8\x86\xaf\x9e\x69\xb9\x44\xca\x13\x29\x63\x96\xde\x04\x72\x67\x97\xb5\xa0\x3c\xa2\xaa\x4e\x6f\x89\x22\x2f\xdf\xf8\x92\xb5\x12\x81\x6d\xf2\x87\xed\xc2\xca\x6a\x13\x4d\x48\x7a\x08\xb9\x34\xfa\xa6\xed\x7a\x14\x64\x50\x77\x5d\x85\x9d\xea\x18\xe3\xcc\x7c\xf5\xe8\x82\x92\x22\x8e\xbf\x48\x53\x84\x48\x0c\x5b\xc7\x4c\xcc\x58\xce\xa1\x41\x12\xca\x4f\x42\x68\x01\xea\x0e\xb4\xde\xc8\x5e\x58\x5e\x0b\x19\xa5\x02\x8c\x92\xab\x41\x59\x14\xb1\x34\xcc\xef\x79\x50\x40\xc1\x86\xe3\xf6\x5c\xab\xef\x29\x7f\x9f\xf6\x5c\xf8\x9c\x4e\x05\x31\xa9\x18\x56\x2c\x0f\x3d\xf9\xd2\x9a\x32\x59\xa4\xa4\x56\xc3\x1c\x2b\x47\x52\x63\x1b\x17\x1a\x81\x99\x28\x99\xeb\x54\x01\x53\xc0\x24\x49\x2b\x16\xf3\x39\xcc\x58\x20\xf4\x64\x93\x05\x7e\xc2\xae\x39\x6b\x2c\xc4\x92\xeb\x18\x87\xa1\x62\x18\xb1\x61\x8c\x7a\x2a\x37\x81\x87\x13\xd2\x03\xad\x40\xc4\x86\x7e\xee\x23\x78\xf9\x55\x2d\x4f\x2c\x57\xf2\x6d\xac\x32\x05\xbc\x69\x9e\x71\xa9\x29\x61\x30\xca\xf9\x1e\x26\xa2\xfc\x43\x49\x69\x27\x63\xc1\x42\x50\x46\x1a\x1c\x57\x89\x40\xed\x35\x4e\x27\x0e\x85\xd2\xce\xee\x8b\x76\x17\xff\x76\x0e\xf7\xf6\xba\xfb\x46\x99\xd3\xc8\xa5\x8d\x32\x41\x65\x42\xe4\xc6\xb4\xe7\x38\x2f\x07\x4a\x2f\x43\x3a\xa8\x76\x6c\x12\xaf\x9a\x8c\x57\xf9\x4b\x07\x25\x71\x96\xf1\xb7\x45\x94\x95\x22\x22\xe5\x44\xb3\x55\x6b\x56\xc4\x71\x03\x91\x3c\x5a\xe7\x2e\xbd\xbe\x22\x5b\xf1\xaf\xa8\x1a\xda\x14\x8c\xe4\x57\x41\xd6\x0e\xaf\xa1\x0e\x3f\x5c\x46\xc9\x95\xca\x64\x41\x91\x45\x39\xf2\x9d\x35\x86\x05\x47\x23\x84\x73\xff\xac\x66\x8c\x27\x4f\x74\xf6\xd7\xc5\xc1\x9d\xb0\x33\xd3\x9c\xb2\x57\x93\x0b\x9b\x29\xd9\x06\x3d\xb7\xc7\x9c\xde\xd0\x7c\xf2\xc4\x70\xcc\xbe\x6d\xba\x1e\xbc\x10\x04\x9e\x7c\xf0\xd9\x70\x60\xbe\xb4\xf1\xff\x8f\xff\xe4\x29\xf9\x42\x91\x0b\x32\x23\xfc\x3d\xe3\x4b\xbe\xbc\x86\xac\xa1\x8f\xa0\x40\x02\xb1\xc6\x9e\x6d\x9e\x9b\xe7\xc7\xc8\x27\x83\xde\x2b\x07\xfb\x5f\x18\xfd\xc9\xe4\xcc\x32\x55\x8e\xaf\xa9\xd4\xf3\xef\xb8\x24\xa3\x96\xd3\xeb\x7d\xf5\x35\x51\x12\x64\x3c\x8c\xb4\x56\x6c\xaa\x3c\x92\x02\x58\xdc\xaf\x98\x5f\x40\xcb\x49\x5e\x79\xe5\x82\xfb\x21\x18\x51\xf5\x0a\x01\x41\xfe\xa5\x5e\x0c\x9b\x2a\xa3\x63\x7a\xc8\xd9\x5f\xbc\xf2\x7a\x17\xee\xa9\x39\x86\x83\xc3\xc9\x27\xeb\xba\xf3\x45\xeb\xa5\x79\x4c\x53\x2d\x1a\x28\x0b\x03\x1c\xe5\xca\xe8\xf5\x5d\xeb\xd2\xf4\xfa\xb0\x90\x37\xa2\xa7\x73\x6b\x8c\x6c\x49\x82\xed\x1c\x74\x41\xdc\x31\x29\x4c\xc8\x21\x7e\xeb\x22\x44\xab\xe2\x86\xc3\xef\x91\x8a\x02\x91\xcc\xa2\x6c\xc9\x78\x6b\x89\x14\xaf\x02\x23\xe3\xf3\x48\xe6\x3a\x4b\x82\xe6\x89\xe5\x50\x42\x36\x51\x55\x46\x9e\x2a\xca\xf6\x79\xcd\x94\x03\xc1\xa5\xae\x11\x71\x2c\xee\xca\xcd\x38\x80\x62\x5f\x39\x04\x83\xd2\x54\x32\x08\x02\x51\x24\xb9\x76\xa0\x75\xb6\x57\xe4\x6d\x25\x7f\x8d\xa8\x62\x71\x89\x64\xc3\x64\x34\x57\xf5\x03\xac\xde\x46\xfc\x0e\x64\x57\xf9\x02\x71\xdc\x06\x67\x9f\x5f\x58\x36\x2a\x91\x75\x32\x86\xa5\x2f\x2d\xf3\x65\x8d\x42\xdf\x0f\x90\x5a\x50\xb7\x72\x1f\xbc\x48\x96\x46\x01\x95\xb4\x2a\x39\xf4\x7b\xfd\x53\xd3\xeb\x5d\xc2\xcf\xec\xda\xae\x73\xd2\x01\x84\xd1\x29\x9c\xe4\x2f\xd7\x8f\x27\x2e\xb0\x8c\x47\x3a\xa8\x2f\xa7\x04\x1f\xf2\x1c\xbb\x0e\x55\xad\xa6\x0a\x0c\xd8\xb0\x28\xae\xa9\x7e\x50\x68\x44\xb9\xd4\xe5\x29\x92\xb2\xe0\xb2\xb3\xb3\xff\xbc\xa2\xf9\x3e\x5f\x58\x1f\xf2\xdb\xd6\x4e\xbc\xca\x32\xdb\xeb\x8d\xd7\x77\xfc\x7a\x21\xc4\x0d\xe5\xa4\x7e\x06\x5f\xcc\x7d\x79\x03\x0d\xc2\x26\xb7\x7e\x4c\xaa\x84\x4d\x90\x5b\xa5\xe1\xf6\x9c\x33\xcf\x1a\x83\xc4\x65\x8f\xa4\xda\x21\x6b\xf2\x38\x82\x5f\x03\x4b\x2d\x39\x55\x0d\x2c\x47\x30\x8b\x24\x94\xc6\xc0\x24\x6f\xb2\x3d\xd7\x3a\x37\x51\xa3\xb1\xe1\x39\xc5\x9f\xb2\x7a\x94\xa8\x90\xe7\xb5\xfa\x47\xca\x73\xce\xac\xa9\xe7\x8e\x1c\x0f\xfb\x08\x0a\x6e\x98\x24\x67\x23\xac\xa3\xc5\x1b\xd4\x74\x7a\x5c\xcc\x66\xaa\x98\x24\x73\x94\x05\x04\x4f\x00\xb8\x96\xf0\xb8\x89\x0a\xc6\x53\x42\x6d\xb0\x66\xa4\x8a\x47\x09\xdf\x42\x91\x7c\x88\xfa\x96\x80\x8f\x3b\xc2\x86\x6a\xb2\x8d\xbc\x31\x1e\x78\xc7\x17\xc3\x21\xa1\x09\x93\x34\xb4\x43\xde\x3f\xa6\x98\x44\x72\x43\x85\x5a\x21\x04\x48\x1f\x64\x74\x0d\x1e\x9d\x8b\xe3\x1f\x9b\x7d\x57\xc1\xaa\x0a\x48\x3e\x93\x95\x63\x68\x80\x46\x70\x64\xa9\x2c\x2e\x97\x79\xda\x9e\xd3\x33\x59\xfb\xf0\xf9\xc1\x0b\xcc\x7d\xfe\x79\x39\xf1\xf6\xad\x1a\xdd\x25\x2d\x8d\x45\xce\x9b\xc4\xaf\xaa\x77\x54\xfb\x39\x54\xca\xee\xe0\x2a\xac\xf1\xd1\xfe\x73\x64\x65\xe7\xdc\x9d\x3a\x18\x89\x63\xaa\x41\xc8\x18\x61\x1b\x61\x40\x15\x0b\x19\xd4\x76\xa1\x45\x82\xbb\x6a\x2f\x0e\x22\xf1\x33\x18\x66\xb9\x04\x21\x88\x41\xf5\xd7\x1e\xf6\xd9\xfe\x47\xdd\x8f\xdb\xcc\xd2\x07\x69\x7e\xab\xba\x28\x37\x84\xa0\x21\x75\x90\x1f\xdf\x21\x55\xae\xcf\x2b\x2b\x8f\x0a\x6a\x15\xd2\xba\x36\x28\x5a\x75\x60\x23\xea\xe4\xdb\x6c\x82\x80\x26\x02\x18\x04\x57\x94\x41\x24\x8f\x67\x2d\x8a\x5c\x70\x56\xdb\x28\xb5\x43\xac\x9d\x41\x07\x3a\x0b\xe2\x08\xa9\xb3\xbe\x90\x0a\x9c\x47\xc0\xc4\x1a\x52\x3c\x6c\x40\xe2\x23\x60\x45\x7b\xd2\xfb\xd0\x4a\xb9\x62\x03\x57\x94\x31\x35\xa8\x0b\x43\x94\x4a\x94\x7e\xd2\xdd\xf3\xbd\xdd\xdd\x36\x73\x49\x88\x12\x09\x7c\x45\x19\x08\x8f\x5c\xb9\xc8\x7a\x31\x24\x24\xf9\x1b\xe4\x4a\x0d\xf6\xa9\x9a\xfd\xac\x86\x1b\xff\x94\x94\xb0\x84\x27\x1a\x43\x1b\x8d\xcc\x51\x79\x24\x4c\xb1\x2e\x04\x2a\x3d\xa6\xbe\x94\x77\x22\x0b\xcb\x7a\xbe\x29\xe5\xc6\x6b\x41\x05\xe5\xdd\xf0\x28\x27\xda\x3a\xc7\xbc\x3b\xdf\x1f\x59\xc8\x21\x9e\x45\x44\xca\x67\x5d\x3e\x55\xcf\x31\x99\xaa\x2a\x50\x25\x2a\x3f\x8d\xda\xb5\x64\x45\xbc\x19\x94\x85\xca\xc6\xe2\x91\x7c\xa6\xea\x6c\x47\xb1\xd0\xa1\x3f\x22\x8b\x7e\xc2\x0d\x77\x72\x66\x8e\x7f\xe0\xa6\x20\x80\x06\xbd\x1c\xb8\x35\x31\x14\xae\xcf\x2b\xf3\x47\xa1\x86\x8b\x1c\xe5\x22\x57\xd6\xc1\x7c\x45\x0e\x19\x48\x0a\x28\x37\x24\xb4\x07\xa8\x9b\xc9\xf6\x5c\x88\xb9\x56\x77\x07\x25\xf8\x2b\x1e\xe4\x6b\xe5\xa8\x99\xff\xa5\x72\xee\xee\xee\x4a\x42\x50\x93\x54\xc7\x28\x09\x48\x4b\x51\x32\x13\x6d\xed\x13\x3f\x78\x39\x78\x24\x08\xfc\x98\x82\xcb\xc2\xb8\x25\x92\xd0\x0a\xdb\x55\x54\x1e\xd5\xf0\x7b\x77\x95\x0a\x2e\x15\xf2\xf6\xed\x1f\xa8\x0c\xb4\x2b\x1e\x49\xe0\x91\x08\x2a\xb7\xb1\xef\x7e\xf9\xd7\xbf\xf9\xfa\xa7\x8f\xfa\x49\xe6\xa7\x8b\x32\xeb\x95\x7c\xb4\xbb\xbf\xcb\x4d\x1e\xdd\xb3\xcd\xfd\x1d\x8f\xae\xc5\x1f\x28\x00\x30\xc9\xa3\x1a\x87\xe7\x2b\xb2\xb5\x73\x7f\x07\xa7\x8f\x6f\xd9\x72\xe7\xd7\x01\x61\x8e\xad\x5e\x80\x2f\xd1\xf5\x6b\xc8\x8d\x92\xd3\x50\xa9\x83\x46\xd5\xca\x07\x97\x07\xe5\x62\xa3\x37\xe8\x4d\x5d\x05\x04\xf5\x48\x85\xc0\xcb\xf9\x12\xd6\x9f\xf4\xb7\x6a\x7a\x59\xa4\xb7\x28\xee\x77\x8d\x5a\x75\xdf\xef\x56\x84\x34\x2f\x2a\xda\xea\xbc\x80\x40\x82\x28\x52\xf0\x55\x50\xde\xd3\xe9\x0e\xbb\xd4\x86\x43\x40\xc6\x1c\xd9\xea\xe6\x28\x0f\xd2\x26\x4d\x1e\x1d\xee\xef\xbd\xf8\xb8\x59\x65\xb1\xa3\xa5\x1f\xf8\x00\x1c\xcd\xf0\xfa\xa8\xdb\x4c\x85\x88\x3d\x09\x6d\x1e\xed\x74\xbb\xcd\x28\x8c\xb9\x57\x62\x8a\x23\x8d\x42\xab\x93\x0f\xd9\x9b\x4d\xa7\xb3\xb3\xb3\xbb\xb3\xf3\xa6\xaa\x43\x84\x7c\xa5\x04\x43\x8f\xeb\x94\xe2\x69\xa3\x5b\xad\xda\xb2\xf9\x7a\x4c\xaf\x80\x4e\x97\xd6\x60\x5b\xb1\xd3\x4c\xdc\x46\x84\xd4\x15\x0c\x9e\xa3\x8b\x26\xf9\xa5\x66\x0f\x4b\x0e\x55\x19\x5c\xf8\xb7\x94\xb0\x57\xd5\xaa\x15\xa7\x8b\x21\x3a\x1e\xa5\x5e\x73\xb8\xe9\x6f\xd1\x71\xb5\xe7\x6d\xf6\x46\xf5\x46\xe5\xac\x7c\xf3\xff\xa6\x45\x12\xf8\x10\xed\x49\x0b\xbf\xad\x30\x23\xf0\xd6\x51\x83\x2c\x94\x49\xc5\x30\xd0\x3c\x80\x44\xc5\x19\xb5\x8d\x87\xd5\x79\x9f\x55\x3c\x7a\x39\xb5\x7b\x6f\xd6\x6a\xf2\xca\xfb\xb7\xb2\xcb\xab\x24\xc1\x99\x4e\x29\x72\x00\x94\x19\x71\xdd\xd7\x94\x6d\x53\xd9\x2d\x45\x5e\x1c\xdd\x70\x4f\xc3\x5f\xec\xb0\x34\x50\x23\x8c\x50\xe9\x0b\x3e\xab\x42\xab\x74\xe7\x9a\xc1\xca\xf0\xd6\x04\x11\xd2\x17\xb6\x59\x83\x87\x66\xa2\xae\x96\x24\x15\x0e\x75\xfe\xd6\x5e\xba\xe2\xa9\x20\x33\xf5\x42\x9a\x0a\xb6\xab\x89\x0d\xeb\x88\x1e\xd2\xe3\x3a\x84\xb6\x88\x1c\x00\x44\x75\x8d\x93\xfe\x1a\x1b\x2b\xc8\x0b\x22\x7a\x62\x43\x25\x8e\x66\x5c\xd1\x79\x64\xbb\x63\x3a\x0e\xf5\x74\x23\x6b\x68\x6e\xef\x37\x5e\x97\xbd\x08\x79\xb5\x4b\x78\x30\xf6\x03\x4e\x0d\x4e\x39\xae\x14\xbe\x69\xdc\x35\xcc\xd2\xfe\xfd\x36\x4a\xa2\xe2\x81\x7f\x97\xf3\x38\xd1\xbe\xb4\xfa\x74\x4e\x89\x53\x75\x77\xe3\x5d\x4c\x47\x93\xde\xc0\xab\xb7\xec\xba\x2d\x92\xea\x2e\x34\x4a\xb8\xe4\xfa\x06\x44\xc1\x9e\x00\xcd\x03\x06\x1a\x61\x21\xe4\xa2\x10\x0d\xe3\xc4\x2e\x09\x39\x68\xcf\x15\x7d\x64\x6d\x45\x60\xdd\xc5\x55\x4b\x6a\x38\xc5\xcf\x73\x44\x37\xd0\x69\x4e\x62\xbe\x5c\x70\x25\xcc\x66\x54\x32\x1f\x92\x72\x65\x4d\x20\xdd\x81\x16\x48\x92\x1a\xde\x90\xb1\xde\x94\x66\xdc\xd8\x6e\x4a\xd7\x44\x84\x2e\x6b\x44\x1e\x6c\xd4\xc2\x6d\xa6\xdf\x6c\x5d\x54\xd4\x26\xe8\x5e\x2f\xe1\xa4\xd2\x25\xb5\x70\xaa\x75\xa5\x7e\x78\x95\x72\x59\x86\x49\xb4\xf4\xe7\xbc\xf3\x55\xca\xe7\x7f\xae\x1f\xd3\x64\x6e\xf4\x46\xa3\xc9\x4b\x73\xa0\xee\x6b\xa8\xbe\x3c\xba\x88\xd0\xde\x3d\xa3\xa8\x25\xa4\xcc\x71\xa6\xca\x0e\xdb\xbc\xee\xed\x9e\x1f\x1b\xe7\xbd\x2f\xd0\xbe\x7e\x49\x42\xee\xed\x96\xfb\x92\x42\xdd\x61\x60\x27\x6d\x92\x0a\xd9\x17\x69\x2c\xfc\x07\x5a\x42\x33\x43\xdb\x09\xea\x3a\xba\xb7\x31\x5e\x93\x2f\x92\xba\x9d\x94\x07\x80\xd2\x5c\xdf\xaf\x95\x60\x94\x54\x47\xb7\x3c\x2b\x86\xf4\x91\xd2\xed\x1a\xa9\x85\x3f\xd0\x21\x80\x30\x92\xf0\x5e\x45\x04\xd5\xa5\x6c\x1f\xb0\x1c\x81\x82\x16\x56\x19\xae\x37\x76\xac\x7e\x93\x5d\x24\xd1\xfd\xc0\xa7\xde\xc6\x2e\xae\x57\xe5\xd3\xb0\x7f\xb0\xbb\x5b\xfd\x7e\xa9\x1f\x9e\x77\x9b\x15\xe9\xf5\x83\x9e\xda\xdb\xdb\xfb\x78\xfd\x30\xf6\x13\xd1\x64\x67\x51\x8e\xc2\x90\xa0\x27\xca\x81\xa9\xcb\x9f\x73\x34\x2c\xd1\xfa\x39\xc8\x84\x2a\x60\xea\x95\x76\x95\xc5\x4d\x99\x93\xd0\x0a\x89\x4c\x31\xea\x5f\x53\x1b\x5b\x53\x83\xe4\x5c\x65\x1e\x42\x1f\x22\xf6\x93\x79\x5b\x64\xf3\x4e\x7a\x33\xef\x90\xf6\x3a\x1f\xe0\xa9\x45\x70\x33\xf7\xc9\x4f\x86\x13\xfb\xbc\xa7\x6b\x11\x70\xac\xbe\xbf\xdf\x5c\x44\x56\x35\xa9\x84\xa7\xf5\xa2\x44\xd5\x94\x7e\xa9\x15\xd4\xb1\x5b\x5d\x16\x3e\x08\xdf\x6a\x6f\xd5\x0c\xa1\xa5\xf3\xc9\x10\x92\xa7\xbe\xba\xf2\x5e\x62\x65\x84\xce\x42\xdd\x9d\x57\xde\x59\x6d\x6b\x2a\x2f\x69\x18\xe5\xa5\x5d\x39\xfa\x7f\xd9\x46\x3f\xe8\xa0\xf5\xc7\x82\x4a\x70\x37\x43\xea\x22\x31\x07\xfc\xba\x98\xd3\x83\x05\xdd\xd3\xef\x4b\x3f\x53\xf2\x9b\x59\x26\x32\x7a\xe8\x67\x11\x5d\x8f\x3d\xac\xce\x9a\x82\x31\x32\x2f\x4d\x42\x29\xea\xd5\xa8\x90\x4a\xa5\x1b\x25\xba\xbe\x38\x22\x33\xb4\xcb\xf1\xab\x6a\xdb\x7a\x83\x52\xc6\xc3\xd5\x34\xb8\x59\xfa\x89\xee\xf0\x74\xe6\x91\x74\x71\x27\xe0\x16\xf0\x6e\x2c\x65\x99\xc8\xf1\xfc\x54\xde\x91\x07\xaa\x18\x14\x94\x1a\xa8\x0b\x2f\xa1\xc1\xb3\x77\xeb\xcd\x68\x72\xe2\xd9\x13\x57\xf7\xa9\x65\xb2\xa2\x48\x8e\x91\x5a\x6b\xe1\x4c\xbd\x3c\xac\x48\xdc\x6c\xd1\x50\x3a\xed\xea\x68\xa6\xcf\x22\x4e\xa5\x67\xa5\xe9\x75\x2a\x91\x8b\x68\x96\xbf\x8f\xce\xee\x01\x40\x8b\x9f\x80\x20\xfb\xf4\x53\xbc\x35\xd9\xee\xf3\xfd\x5a\x92\xf1\x9c\x53\x6b\xa8\xbe\xd1\x1c\xa8\x1a\x36\xa7\x4c\xa8\xa4\x0e\xd1\xc9\xac\xde\x95\x6b\xd0\xb3\x46\xaf\xde\x91\xcc\xbc\x4f\xa3\x4c\xe5\x8e\x95\x24\x76\x88\x00\xf1\xf2\x34\xe4\x31\xa7\x6b\xbe\x19\xdd\xfe\x2d\xc1\x36\xad\xd8\x56\xd7\x0b\xc5\xcc\xfa\x2a\xb6\x66\xe6\xe4\x31\x1b\x27\x75\xab\xd9\xbc\x04\xa8\x1a\x9d\x52\x36\xd3\xdf\xfe\x4a\x7d\x2c\x51\x94\x91\x81\x1f\x81\x12\xb6\x09\x28\x33\x36\xfb\xae\x87\x7a\x7c\xee\xd4\xbf\x2b\xb9\xd8\x8f\x58\xcb\xd6\xb4\xd5\x17\xaf\x1a\x12\x06\x91\x18\xc7\xbd\x8f\x6a\x1d\x9c\x94\x61\x01\x6c\x47\x2e\x5f\x20\x3b\xea\xd8\x2f\xc2\xf4\x81\xdf\xd3\x92\xfa\x97\x3e\xbc\x83\xc0\x69\x1d\x78\x97\xdf\xea\xd6\x37\xf0\x2a\x93\x3c\xd0\x12\x0d\xd6\xb5\xf4\xbe\xdb\xad\x6d\x06\x06\x91\x3f\x4f\x70\x5c\x14\x54\xaa\xd3\x57\x22\x0a\x3c\x34\x6a\x37\x61\xef\x5d\xf8\xe0\x6a\x6c\x7d\x81\xf4\xfb\xdd\x77\x28\xeb\x72\xc2\xae\x9b\xaf\x30\x62\x53\x9f\xcb\x9c\xf7\xba\xb1\x53\xbf\x65\x69\x34\x1b\xbb\x5b\xef\x57\x64\x13\x93\xee\x28\x9d\x9a\xda\xd6\x69\xf7\xa1\xea\x36\x1f\x6f\x36\xea\xdb\xfe\x88\xc3\xb6\xbe\xa7\x18\x03\x9b\x68\xab\x75\xc7\xd8\x17\xd2\x7d\xdc\x3d\x8a\x8a\x66\xef\x50\x7d\x8e\x39\xa4\x3f\x9f\xad\x3f\xd4\xaa\xab\xdf\x3f\x43\xea\xcd\x00\x58\x8f\x8a\x7c\x76\x60\x90\xd7\xa8\x7a\x02\x6c\x7c\xa5\xe2\xe1\xc4\x72\xbd\x81\x35\x1c\x6e\x47\x3f\xdd\xad\x66\xf3\x42\x63\x25\xf2\x76\x55\x19\xa0\xc5\x0f\xb1\x91\xcd\x83\x0f\xab\x63\x1b\xad\x96\x3f\x27\x0e\x25\x14\xc8\xf0\x82\x8c\x46\xd5\x84\x0a\x9d\x2a\x87\x22\x59\x17\xbc\x28\x6f\xc9\x60\xa9\x5a\xd8\x50\x04\x52\x0d\xcc\x83\xce\x4e\xfb\x45\xfb\x39\x21\xde\x9e\x7d\x42\x0c\xa8\xab\x19\x9c\xb2\xe0\x7e\x8c\xea\x81\x62\x1c\xdc\xb4\x15\xc7\xed\x99\x0c\x6e\xae\xde\xc1\x66\xa6\xfa\x5e\xa7\x71\xfd\xa6\x29\x5d\x88\x22\xdb\xc0\x0b\x95\xa3\x3e\x6a\xd7\x7b\xd2\xdd\x8f\xde\x2f\x25\x1d\x56\x97\xb3\x48\x32\x82\x53\xaa\x03\x68\xb5\x72\x7f\x2e\x7f\x1f\x41\x89\x5a\x29\xea\x5a\xce\xd7\xd1\xce\x01\xa5\x99\xde\x58\x0d\xf0\xa4\x75\xe1\x34\x7f\xb2\x68\xf5\xc7\xf4\xf7\xf4\xac\x19\xf2\xd6\xc0\x6c\xce\xb2\x56\xbf\xd7\x4c\xe2\xd6\x78\xd4\x8c\x6f\x5b\xa3\xcb\x66\x56\xb4\xec\x8b\xe6\x57\x7e\xeb\xc7\xd3\x26\x97\x2d\xd3\x51\x1f\xe8\x88\x86\x89\x74\x14\xc9\x45\xf3\xd7\xff\xf6\x17\xdf\xfd\xe7\xdf\x7c\xf7\xf3\x9f\x7d\xff\xb7\x7f\xd5\xfc\xf5\x2f\xbe\xfe\xef\x7f\xf9\x69\xf9\x32\xe0\x45\x2e\x83\x45\x73\x98\xf9\xc9\xaf\xfe\xd9\x8f\x64\x73\xcc\xd1\x84\x02\x8c\xa0\x83\x1f\xf9\xf9\x6d\xc4\xff\xeb\x1f\x8b\xe6\x37\xff\xf0\xed\x5f\x7e\xfb\xf5\xb7\x5f\x7f\xf3\xcb\x6f\x7e\xfe\xcd\x2f\x9a\xdf\xff\xdd\x3f\x7d\xff\xf7\xff\xfa\x9b\x7f\xff\x59\xd3\x94\xa9\xff\xab\xff\x10\xb1\xf1\x3f\x01\x00\x00\xff\xff\xf6\x5f\x16\x3b\x6f\x21\x00\x00")

func templates_new_files_conf_app_ini_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_new_files_conf_app_ini_tmpl,
		"templates/new/files/conf_app.ini.tmpl",
	)
}

func templates_new_files_conf_app_ini_tmpl() (*asset, error) {
	bytes, err := templates_new_files_conf_app_ini_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/new/files/conf_app.ini.tmpl", size: 8559, mode: os.FileMode(420), modTime: time.Unix(1426872277, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_new_files_models_models_go_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templates_new_files_models_models_go_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_new_files_models_models_go_tmpl,
		"templates/new/files/models_models.go.tmpl",
	)
}

func templates_new_files_models_models_go_tmpl() (*asset, error) {
	bytes, err := templates_new_files_models_models_go_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/new/files/models_models.go.tmpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1426872277, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_new_files_modules_base_base_go_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templates_new_files_modules_base_base_go_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_new_files_modules_base_base_go_tmpl,
		"templates/new/files/modules_base_base.go.tmpl",
	)
}

func templates_new_files_modules_base_base_go_tmpl() (*asset, error) {
	bytes, err := templates_new_files_modules_base_base_go_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/new/files/modules_base_base.go.tmpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1426872277, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_new_files_modules_base_template_go_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templates_new_files_modules_base_template_go_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_new_files_modules_base_template_go_tmpl,
		"templates/new/files/modules_base_template.go.tmpl",
	)
}

func templates_new_files_modules_base_template_go_tmpl() (*asset, error) {
	bytes, err := templates_new_files_modules_base_template_go_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/new/files/modules_base_template.go.tmpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1426872277, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_new_files_modules_middleware_context_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcd\x31\x4e\xc5\x30\x0c\x06\xe0\x39\x3e\x85\xf5\x06\x94\x20\xd4\xee\x95\x98\x58\x58\x18\x39\x40\x70\x43\xa9\x4a\x9c\xc8\x38\x6a\x11\xea\xdd\x49\xa4\x74\x79\x5b\xfe\x3f\x9f\xed\xec\x69\xf3\x4b\xc0\xb8\xce\xf3\x77\xd8\xbd\x04\x80\x35\xe6\x24\x8a\x16\xcc\x6d\x59\xf5\xab\x7c\x0c\x94\xe2\xf8\xce\x1b\xef\x89\xc7\xe8\xc9\x4b\xe2\x1b\x38\x00\xfd\xcd\x01\x5f\x12\x6b\x38\x14\x7f\x54\x0a\x29\xfe\x81\x79\xec\x66\xe8\x5f\x70\x02\x7c\x16\xa6\x8b\x06\xb1\x0e\x2f\xf3\xea\xb9\x5e\x96\x36\x27\x41\x8b\x30\x36\x6a\x09\xef\xb7\xb8\x46\x0c\xe9\x81\xd3\x33\x3e\xf4\xb2\x55\xa6\xbf\x27\xa4\xa7\x1a\xcf\xa6\x86\x37\x9f\x6d\xb5\x0e\x6a\x3e\xe1\x3f\x00\x00\xff\xff\xd3\x74\x57\x25\xe7\x00\x00\x00")

func templates_new_files_modules_middleware_context_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_new_files_modules_middleware_context_tmpl,
		"templates/new/files/modules_middleware_context.tmpl",
	)
}

func templates_new_files_modules_middleware_context_tmpl() (*asset, error) {
	bytes, err := templates_new_files_modules_middleware_context_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/new/files/modules_middleware_context.tmpl", size: 231, mode: os.FileMode(420), modTime: time.Unix(1427308111, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_new_files_modules_settings_settings_go_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templates_new_files_modules_settings_settings_go_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_new_files_modules_settings_settings_go_tmpl,
		"templates/new/files/modules_settings_settings.go.tmpl",
	)
}

func templates_new_files_modules_settings_settings_go_tmpl() (*asset, error) {
	bytes, err := templates_new_files_modules_settings_settings_go_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/new/files/modules_settings_settings.go.tmpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1426872277, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_new_files_public_css_base_css_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templates_new_files_public_css_base_css_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_new_files_public_css_base_css_tmpl,
		"templates/new/files/public_css_base.css.tmpl",
	)
}

func templates_new_files_public_css_base_css_tmpl() (*asset, error) {
	bytes, err := templates_new_files_public_css_base_css_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/new/files/public_css_base.css.tmpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1426872277, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_new_files_public_js_base_js_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templates_new_files_public_js_base_js_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_new_files_public_js_base_js_tmpl,
		"templates/new/files/public_js_base.js.tmpl",
	)
}

func templates_new_files_public_js_base_js_tmpl() (*asset, error) {
	bytes, err := templates_new_files_public_js_base_js_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/new/files/public_js_base.js.tmpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1426872277, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_new_files_routers_home_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\xcc\x3d\x4b\x04\x31\x10\xc6\xf1\x3a\xf3\x29\xc6\xa9\x36\x72\x6c\x0e\x4b\x5b\x9b\x43\xbc\xb3\x50\xb0\x10\x8b\x90\x1d\xcf\x60\x5e\x96\x64\x82\x07\x4b\xbe\xbb\x91\x2b\xac\x9e\xe2\xf9\xf3\x5b\xad\xfb\xb6\x67\xc6\x92\x9b\x70\xa9\x00\x3e\xae\xb9\x08\x4e\xa0\x68\xdb\xe6\x93\x8d\xdc\xbb\x89\x79\x69\x81\xab\x89\x7e\x59\x02\xff\xd8\xc2\x04\x1a\xe0\xb3\x25\x87\x87\x1c\x79\x72\x72\xc1\xdb\xff\x77\x7e\xc8\x49\xf8\x22\x1a\x37\x50\xe3\x9b\x1f\x5f\x9e\x4f\xd3\xdd\x7e\xbf\xc3\x68\xd7\xf7\x2a\xc5\xa7\xf3\xc7\x75\x46\xa1\x48\xbc\x04\xa6\x7b\xa4\x37\x0e\x6e\x80\x28\x19\x5b\x65\x3c\x5a\x67\x4b\x4e\x37\xb4\x03\xd5\x35\x28\x63\xf0\x8f\x3b\xbc\x1e\x9f\xae\x1c\x7d\x8d\x9a\x34\xf4\xdf\x00\x00\x00\xff\xff\x21\xff\x29\xcc\xc9\x00\x00\x00")

func templates_new_files_routers_home_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_new_files_routers_home_tmpl,
		"templates/new/files/routers_home.tmpl",
	)
}

func templates_new_files_routers_home_tmpl() (*asset, error) {
	bytes, err := templates_new_files_routers_home_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/new/files/routers_home.tmpl", size: 201, mode: os.FileMode(420), modTime: time.Unix(1427307821, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_new_files_settings_go_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templates_new_files_settings_go_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_new_files_settings_go_tmpl,
		"templates/new/files/settings.go.tmpl",
	)
}

func templates_new_files_settings_go_tmpl() (*asset, error) {
	bytes, err := templates_new_files_settings_go_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/new/files/settings.go.tmpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1426872277, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_new_files_templates_layout_tmpl_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\xbb\x6e\x2b\x21\x10\x86\x7b\x3f\xc5\x9c\xe9\x8f\x57\xee\x52\x00\x4d\x2e\x5d\x2e\x85\xa3\x28\xe5\x98\x1d\x1b\x1c\x16\x56\x30\x71\x62\x59\x7e\xf7\x2c\xa0\x34\xa9\x10\xdf\xe8\x9b\x5f\xff\xa8\x7f\x77\xcf\xb7\xdb\xf7\x97\x7b\x70\x32\x05\xb3\x52\xf5\x81\x40\xf1\xa0\x91\x23\x56\xc0\x34\x9a\x15\x80\x9a\x58\x08\xac\xa3\x5c\x58\x34\xbe\x6e\x1f\xfe\xdf\x60\x1b\x88\x97\xc0\xe6\x72\x59\x3f\xd1\xc4\xd7\xab\x1a\x3a\x58\xd5\x59\xf0\xf1\x03\x32\x07\x8d\xc5\xa5\x2c\xf6\x53\xc0\xdb\x14\x11\x5c\xe6\xbd\xc6\x3d\x9d\xea\x77\x3d\xc7\x03\xc2\xd0\x95\x62\xb3\x9f\x05\xe4\x3c\xb3\x46\xe1\x6f\x19\x8e\x74\xa2\x4e\x11\x4a\xb6\x1a\x77\x54\x78\x7d\x2c\x68\xd4\xd0\xb9\xf9\x93\x25\xe7\xc0\xc5\x31\xcb\x6f\x50\x33\x6c\x29\xb5\xd1\xd0\x2b\xa9\x5d\x1a\xcf\x4d\x1c\xfd\x09\xfc\xa8\xf1\x2b\xd3\x3c\x73\x6e\xad\x16\xec\x36\xe6\x8d\x83\x4d\x13\xc3\x36\xc1\x23\x59\xca\x29\x2e\xf6\xa6\x49\xc3\x62\xd5\x65\x7d\xcb\x82\xdb\xfd\x7e\x02\x00\x00\xff\xff\x04\x26\x3f\xa2\x50\x01\x00\x00")

func templates_new_files_templates_layout_tmpl_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_new_files_templates_layout_tmpl_tmpl,
		"templates/new/files/templates_layout.tmpl.tmpl",
	)
}

func templates_new_files_templates_layout_tmpl_tmpl() (*asset, error) {
	bytes, err := templates_new_files_templates_layout_tmpl_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/new/files/templates_layout.tmpl.tmpl", size: 336, mode: os.FileMode(420), modTime: time.Unix(1426872277, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_scaffold_config_toml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templates_scaffold_config_toml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_scaffold_config_toml,
		"templates/scaffold/config.toml",
	)
}

func templates_scaffold_config_toml() (*asset, error) {
	bytes, err := templates_scaffold_config_toml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/scaffold/config.toml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1426872277, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/new/config.toml": templates_new_config_toml,
	"templates/new/files/app.tmpl": templates_new_files_app_tmpl,
	"templates/new/files/conf_app.ini.tmpl": templates_new_files_conf_app_ini_tmpl,
	"templates/new/files/models_models.go.tmpl": templates_new_files_models_models_go_tmpl,
	"templates/new/files/modules_base_base.go.tmpl": templates_new_files_modules_base_base_go_tmpl,
	"templates/new/files/modules_base_template.go.tmpl": templates_new_files_modules_base_template_go_tmpl,
	"templates/new/files/modules_middleware_context.tmpl": templates_new_files_modules_middleware_context_tmpl,
	"templates/new/files/modules_settings_settings.go.tmpl": templates_new_files_modules_settings_settings_go_tmpl,
	"templates/new/files/public_css_base.css.tmpl": templates_new_files_public_css_base_css_tmpl,
	"templates/new/files/public_js_base.js.tmpl": templates_new_files_public_js_base_js_tmpl,
	"templates/new/files/routers_home.tmpl": templates_new_files_routers_home_tmpl,
	"templates/new/files/settings.go.tmpl": templates_new_files_settings_go_tmpl,
	"templates/new/files/templates_layout.tmpl.tmpl": templates_new_files_templates_layout_tmpl_tmpl,
	"templates/scaffold/config.toml": templates_scaffold_config_toml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"new": &_bintree_t{nil, map[string]*_bintree_t{
			"config.toml": &_bintree_t{templates_new_config_toml, map[string]*_bintree_t{
			}},
			"files": &_bintree_t{nil, map[string]*_bintree_t{
				"app.tmpl": &_bintree_t{templates_new_files_app_tmpl, map[string]*_bintree_t{
				}},
				"conf_app.ini.tmpl": &_bintree_t{templates_new_files_conf_app_ini_tmpl, map[string]*_bintree_t{
				}},
				"models_models.go.tmpl": &_bintree_t{templates_new_files_models_models_go_tmpl, map[string]*_bintree_t{
				}},
				"modules_base_base.go.tmpl": &_bintree_t{templates_new_files_modules_base_base_go_tmpl, map[string]*_bintree_t{
				}},
				"modules_base_template.go.tmpl": &_bintree_t{templates_new_files_modules_base_template_go_tmpl, map[string]*_bintree_t{
				}},
				"modules_middleware_context.tmpl": &_bintree_t{templates_new_files_modules_middleware_context_tmpl, map[string]*_bintree_t{
				}},
				"modules_settings_settings.go.tmpl": &_bintree_t{templates_new_files_modules_settings_settings_go_tmpl, map[string]*_bintree_t{
				}},
				"public_css_base.css.tmpl": &_bintree_t{templates_new_files_public_css_base_css_tmpl, map[string]*_bintree_t{
				}},
				"public_js_base.js.tmpl": &_bintree_t{templates_new_files_public_js_base_js_tmpl, map[string]*_bintree_t{
				}},
				"routers_home.tmpl": &_bintree_t{templates_new_files_routers_home_tmpl, map[string]*_bintree_t{
				}},
				"settings.go.tmpl": &_bintree_t{templates_new_files_settings_go_tmpl, map[string]*_bintree_t{
				}},
				"templates_layout.tmpl.tmpl": &_bintree_t{templates_new_files_templates_layout_tmpl_tmpl, map[string]*_bintree_t{
				}},
			}},
		}},
		"scaffold": &_bintree_t{nil, map[string]*_bintree_t{
			"config.toml": &_bintree_t{templates_scaffold_config_toml, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

