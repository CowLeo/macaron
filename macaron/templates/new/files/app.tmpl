package main

import (
	"fmt"
	"html/template"
	"log"
	"net/http"
	"os"
	"path"
	"runtime"
	"time"

	"github.com/Unknwon/macaron"
	"github.com/macaron-contrib/binding"
	"github.com/macaron-contrib/cache"
	"github.com/macaron-contrib/csrf"
	"github.com/macaron-contrib/session"
	"github.com/macaron-contrib/toolbox"

	"{{.App.Name}}/models"
	"{{.App.Name}}/modules/base"
	"{{.App.Name}}/modules/middleware"
	"{{.App.Name}}/modules/setting"
	"{{.App.Name}}/router"
	"{{.App.Name}}/router/default"
)

func main() {
	runtime.GOMAXPROCS(runtime.NumCPU())
	run()
}

func newMacaron() *macaron.Macaron {
	m := macaron.New()
	m.Use(macaron.Logger())
	m.Use(macaron.Recovery())

	m.Use(session.Sessioner(setting.SessionConfig))

	m.Use(middleware.Contexter())
	return m
}

func run() {
	router.Init()
	bindIgnErr := binding.BindIgnErr

	m := newMacaron()
	// Routers.
	m.Get("/", router.Home)

	// Not found handler.
	m.NotFound(router.NotFound)

	var err error
	listenAddr := fmt.Sprintf("%s:%s", setting.HttpAddr, setting.HttpPort)
	log.Printf("Listen: %v://%s%s", setting.Protocol, listenAddr, setting.AppSubUrl)

	err = http.ListenAndServe(listenAddr, m)

	if err != nil {
		log.Printf("Fail to start server: %v", err)
		os.Exit(-1)
	}
}
